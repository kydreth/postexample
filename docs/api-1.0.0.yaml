---
openapi: "3.0.0"
info:
  title: "Post Example"
  description: "This is the Post Example API doc\n"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "post@example.com"
  version: "1.0.0"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
servers:
  - url: "https://virtserver.swaggerhub.com/dev-env/postexample/1.0.0"
    description: "SwaggerHub API Auto Mocking"
tags:
  - name: "post"
    description: "posts from the enterprise"
    externalDocs:
      description: "Find out more"
      url: "http://example.com"
  - name: "comment"
    description: "comments on posts"
    externalDocs:
      description: "Find out more"
      url: "http://example.com"
  - name: "user"
    description: "operations about user accounts"
    externalDocs:
      description: "Find out more"
      url: "http://example.com"
paths:
  /post:
    post:
      tags:
        - "post"
      summary: "Create a new post to the portal"
      operationId: "createPost"
      requestBody:
        $ref: "#/components/requestBodies/Post"
      responses:
        "405":
          description: "Invalid input"
      security:
        - post_auth:
            - "write:posts"
            - "read:posts"
  /post/{postId}:
    get:
      tags:
        - "post"
      summary: "Find post by ID"
      description: "Returns a single post"
      operationId: "getPostById"
      parameters:
        - name: "postId"
          in: "path"
          description: "ID of post to return"
          required: true
          style: "simple"
          explode: false
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
            application/xml:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Post not found"
      security:
        - api_key: []
    put:
      tags:
        - "post"
      summary: "Update an existing post"
      operationId: "updatePost"
      parameters:
        - name: "postId"
          in: "path"
          description: "ID of post to update"
          required: true
          style: "simple"
          explode: false
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        $ref: "#/components/requestBodies/Post"
      responses:
        "200":
          description: "successful updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
            application/xml:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Post not found"
        "405":
          description: "Validation exception"
      security:
        - post_auth:
            - "write:posts"
            - "read:posts"
    delete:
      tags:
        - "post"
      summary: "Deletes a post"
      operationId: "deletePost"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          style: "simple"
          explode: false
          schema:
            type: "string"
        - name: "postId"
          in: "path"
          description: "post id to delete"
          required: true
          style: "simple"
          explode: false
          schema:
            type: "integer"
            format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Post not found"
      security:
        - post_auth:
            - "write:posts"
            - "read:posts"
  /post/list:
    get:
      tags:
        - "post"
      summary: "Returns posts by status"
      description: "Returns an aggregation of statuses"
      operationId: "getPostList"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                additionalProperties:
                  type: "integer"
                  format: "int64"
      security:
        - api_key: []
  /post/findByStatus:
    get:
      tags:
        - "post"
      summary: "Finds Posts by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPostsByStatus"
      parameters:
        - name: "status"
          in: "query"
          description: "Status values that need to be considered for filter"
          required: true
          style: "form"
          explode: true
          schema:
            type: "array"
            items:
              type: "string"
              enum:
                - "draft"
                - "submitted"
                - "reviewed"
                - "in-progress"
                - "completed"
                - "deployed"
                - "archived"
              default: "draft"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Post"
            application/xml:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Post"
        "400":
          description: "Invalid status value"
      security:
        - post_auth:
            - "write:posts"
            - "read:posts"
  /post/findByTags:
    get:
      tags:
        - "post"
      summary: "Finds Posts by tags"
      description: "Muliple tags can be provided with comma separated strings. Use\\\
        \ \\ tag1, tag2, tag3 for testing."
      operationId: "findPostsByTags"
      parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          style: "form"
          explode: true
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Post"
            application/xml:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Post"
        "400":
          description: "Invalid tag value"
      deprecated: true
      security:
        - post_auth:
            - "write:posts"
            - "read:posts"
  /post/{postId}/uploadFile:
    post:
      tags:
        - "post"
      summary: "uploads a file"
      operationId: "uploadFile"
      parameters:
        - name: "postId"
          in: "path"
          description: "ID of post to update"
          required: true
          style: "simple"
          explode: false
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: "string"
              format: "binary"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - post_auth:
            - "write:posts"
            - "read:posts"
  /post/{postId}/comments:
    get:
      tags:
        - "comment"
      summary: "Get Comments by Post ID"
      operationId: "getCommentsByPostId"
      parameters:
        - name: "postId"
          in: "path"
          description: "ID of post to return"
          required: true
          style: "simple"
          explode: false
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Comment"
            application/xml:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Comment"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Post not found"
      security:
        - post_auth:
            - "write:posts"
            - "read:posts"
    post:
      tags:
        - "comment"
      summary: "Add comment to an existing post"
      operationId: "addComment"
      parameters:
        - name: "postId"
          in: "path"
          description: "ID of post to update"
          required: true
          style: "simple"
          explode: false
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        $ref: "#/components/requestBodies/Comment"
      responses:
        "200":
          description: "successful updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
            application/xml:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Post not found"
        "405":
          description: "Validation exception"
      security:
        - post_auth:
            - "write:posts"
            - "read:posts"
  /post/{postId}/comments/{commentId}:
    put:
      tags:
        - "comment"
      summary: "Update an existing comment for an existing post"
      operationId: "updateComment"
      parameters:
        - name: "postId"
          in: "path"
          description: "ID of post to update"
          required: true
          style: "simple"
          explode: false
          schema:
            type: "integer"
            format: "int64"
        - name: "commentId"
          in: "path"
          description: "Comment ID of comment to update"
          required: true
          style: "simple"
          explode: false
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        $ref: "#/components/requestBodies/Comment"
      responses:
        "200":
          description: "successful updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
            application/xml:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Post not found"
        "405":
          description: "Validation exception"
      security:
        - post_auth:
            - "write:posts"
            - "read:posts"
    delete:
      tags:
        - "comment"
      summary: "Deletes a post"
      operationId: "deleteComment"
      parameters:
        - name: "postId"
          in: "path"
          description: "Post ID to delete"
          required: true
          style: "simple"
          explode: false
          schema:
            type: "integer"
            format: "int64"
        - name: "commentId"
          in: "path"
          description: "Comment ID of comment to delete"
          required: true
          style: "simple"
          explode: false
          schema:
            type: "integer"
            format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Post not found"
      security:
        - post_auth:
            - "write:posts"
            - "read:posts"
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      parameters:
        - name: "email"
          in: "query"
          description: "email of post to update"
          required: true
          style: "form"
          explode: true
          schema:
            type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          style: "form"
          explode: true
          schema:
            type: "string"
      requestBody:
        description: "Created user object"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    post:
      tags:
        - "user"
      summary: "Logs user into the system"
      operationId: "loginUser"
      parameters:
        - name: "email"
          in: "query"
          description: "The user email for login"
          required: true
          style: "form"
          explode: true
          schema:
            type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          style: "form"
          explode: true
          schema:
            type: "string"
      responses:
        "200":
          description: "successful operation"
          headers:
            X-Rate-Limit:
              description: "calls per hour allowed by the user"
              style: "simple"
              explode: false
              schema:
                type: "integer"
                format: "int64"
            X-Expires-After:
              description: "date in UTC when token expires"
              style: "simple"
              explode: false
              schema:
                type: "string"
                format: "date-time"
          content:
            application/json:
              schema:
                type: "string"
            application/xml:
              schema:
                type: "string"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    post:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      operationId: "logoutUser"
      responses:
        default:
          description: "successful operation"
  /user/{userId}:
    get:
      tags:
        - "user"
      summary: "Get user by user ID"
      operationId: "getUserByID"
      parameters:
        - name: "userId"
          in: "path"
          description: "The ID that needs to be fetched."
          required: true
          style: "simple"
          explode: false
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Invalid userID supplied"
        "404":
          description: "User not found"
    put:
      tags:
        - "user"
      summary: "Update user by user ID"
      description: "This can only be done by the logged in user."
      operationId: "updateUserByID"
      parameters:
        - name: "userId"
          in: "path"
          description: "The ID that needs to be fetched."
          required: true
          style: "simple"
          explode: false
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        description: "Updated user object"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user by user ID"
      description: "This can only be done by the logged in user."
      operationId: "deleteUserByID"
      parameters:
        - name: "userId"
          in: "path"
          description: "The ID that needs to be fetched."
          required: true
          style: "simple"
          explode: false
          schema:
            type: "integer"
            format: "int64"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /user/createWithArray:
    post:
      tags:
        - "user"
      summary: "Creates list of users with given input array"
      operationId: "createUsersWithArrayInput"
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
        - "user"
      summary: "Creates list of users with given input array"
      operationId: "createUsersWithListInput"
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
      responses:
        default:
          description: "successful operation"
components:
  schemas:
    Community:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
      xml:
        name: "Community"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        nameFirst:
          type: "string"
        nameLast:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        phone:
          type: "string"
        created_at:
          type: "string"
          format: "date-time"
        updated_at:
          type: "string"
          format: "date-time"
      xml:
        name: "User"
    Comment:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        description:
          type: "string"
        post_id:
          type: "integer"
          format: "int64"
        created_at:
          type: "string"
          format: "date-time"
        updated_at:
          type: "string"
          format: "date-time"
      xml:
        name: "Comment"
    Tag:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
      xml:
        name: "Tag"
    Post:
      required:
        - "description"
        - "title"
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        author:
          $ref: "#/components/schemas/User"
        community:
          $ref: "#/components/schemas/Community"
        title:
          type: "string"
        description:
          type: "string"
        businessCase:
          type: "string"
        submission:
          type: "string"
          format: "date-time"
        active:
          type: "boolean"
        accountId:
          type: "integer"
          format: "int64"
        statusId:
          type: "integer"
          format: "int64"
        previousPostId:
          type: "integer"
          format: "int64"
        comments:
          type: "array"
          xml:
            name: "comment"
            wrapped: true
          items:
            $ref: "#/components/schemas/Comment"
        tags:
          type: "array"
          xml:
            name: "tag"
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: "string"
          description: "pet status in the store"
          enum:
            - "draft"
            - "submitted"
            - "reviewed"
            - "in-progress"
            - "completed"
            - "deployed"
            - "archived"
        created_at:
          type: "string"
          format: "date-time"
        updated_at:
          type: "string"
          format: "date-time"
      xml:
        name: "Post"
    ApiResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        type:
          type: "string"
        message:
          type: "string"
  requestBodies:
    Post:
      description: "Post object that needs to be saved"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Post"
        application/xml:
          schema:
            $ref: "#/components/schemas/Post"
      required: true
    UserArray:
      description: "List of user object"
      content:
        application/json:
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/User"
      required: true
  securitySchemes:
    post_auth:
      type: "oauth2"
      flows:
        implicit:
          authorizationUrl: "http://post_auth.swagger.io/oauth/dialog"
          scopes:
            write:posts: "modify posts in your account"
            read:posts: "read your posts"
    api_key:
      type: "apiKey"
      name: "api_key"
      in: "header"
